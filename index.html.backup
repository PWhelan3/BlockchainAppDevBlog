<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>BlockchainAppDev Blog</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Inter', -apple-system, BlinkMacSystemFont, sans-serif;
            background: linear-gradient(135deg, #1e1e20 0%, #2c6a78 100%);
            min-height: 100vh;
            color: #333;
            line-height: 1.6;
        }

        .container {
            max-width: 1200px;
            margin: 0 auto;
            padding: 15px 20px;
        }

        header {
            background: rgba(255, 255, 255, 0);
            backdrop-filter: blur(10px);
            box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);
            position: sticky;
            top: 0;
            z-index: 100;
            border-bottom: 1px solid rgba(255, 255, 255, 0.2);
        }

        nav {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 2rem 0;
        }

        .logo {
            font-size: 1.8rem;
            font-weight: 700;
            background: linear-gradient(135deg, #08aaa2, #4c187f);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            background-clip: text;
        }

        .nav-links {
            display: flex;
            gap: 2rem;
            list-style: none;
        }

        .nav-links a {
            text-decoration: none;
            color: #ffffff;
            font-weight: 500;
            transition: all 0.3s ease;
            position: relative;
            padding: 0.5rem 1rem;
            border-radius: 8px;
        }

        .nav-links a:hover {
            color: #6ba07f;
            background: rgba(102, 126, 234, 0.1);
            transform: translateY(-2px);
        }

        main {
            padding: 3rem 0;
        }

        .hero {
            text-align: center;
            margin-top: 4rem;
            margin-bottom: 5rem;
            animation: fadeInUp 1s ease-out;
        }

        .hero h1 {
            font-size: 3.5rem;
            font-weight: 800;
            color: white;
            margin-bottom: 1rem;
            text-shadow: 0 4px 20px rgba(0, 0, 0, 0.3);
        }

        .hero p {
            font-size: 1.2rem;
            color: rgba(255, 255, 255, 0.9);
            max-width: 600px;
            margin: 0 auto;
        }

        .blog-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(650px, 1fr));
            gap: 3rem;
            margin-bottom: 4rem;
        }

        .blog-post {
            background: rgba(255, 255, 255, 0.95);
            backdrop-filter: blur(20px);
            border-radius: 8px;
            padding: 2rem;
            box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);
            border: 1px solid rgba(255, 255, 255, 0.2);
            transition: all 0.3s ease;
            animation: fadeInUp 0.8s ease-out;
        }

        .blog-post:hover {
            transform: translateY(-5px);
            box-shadow: 0 20px 40px rgba(0, 0, 0, 0.15);
        }

        .post-date {
            color: #09881c;
            font-size: 0.9rem;
            font-weight: 600;
            margin-bottom: 0.5rem;
            text-transform: uppercase;
            letter-spacing: 0.5px;
        }

        .post-title {
            font-size: 1.5rem;
            font-weight: 700;
            margin-bottom: 1rem;
            color: #333;
        }

        .post-excerpt {
            color: #666;
            margin-bottom: 1.5rem;
        }

        .post-tags {
            display: flex;
            gap: 0.5rem;
            flex-wrap: wrap;
            margin-bottom: 1rem;
        }

        .tag {
            background: white;
            color: rgb(0, 0, 0);
            border: 1px solid black;
            padding: 0.3rem 0.8rem;
            border-radius: 20px;
            font-size: 0.8rem;
            font-weight: 500;
        }

        .read-more {
            background: white;
            color: #1c8219;
            border: 1px solid black;
            border-radius: 20px;
            padding: 0.3rem 0.8rem;
            text-decoration: none;
            font-weight: 600;
            display: inline-flex;
            align-items: center;
            gap: 0.5rem;
            transition: all 0.3s ease;
            cursor: pointer;
        }

        .read-more:hover {
            transform: translateX(5px);
        }

        .post-page {
            display: none;
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100vh;
            background: linear-gradient(135deg, #1e1e20 0%, #2c6a78 100%);
            z-index: 2000;
            overflow-y: auto;
        }

        .post-page-content {
            max-width: 800px;
            margin: 0 auto;
            padding: 2rem;
            background: rgba(255, 255, 255, 0.95);
            backdrop-filter: blur(10px);
            border-radius: 16px;
            margin-top: 2rem;
            margin-bottom: 2rem;
            box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);
            animation: slideIn 0.5s ease;
        }

        .back-btn {
            position: fixed;
            top: 2rem;
            left: 2rem;
            background: rgba(255, 255, 255, 0.9);
            backdrop-filter: blur(10px);
            border: none;
            border-radius: 50%;
            width: 50px;
            height: 50px;
            cursor: pointer;
            font-size: 1.2rem;
            color: #0f3d12;
            box-shadow: 0 4px 20px rgba(0, 0, 0, 0.1);
            transition: all 0.3s ease;
            z-index: 2001;
        }

        .back-btn:hover {
            transform: scale(1.1);
            background: white;
        }

        .post-page h1 {
            font-size: 2.5rem;
            margin-bottom: 1rem;
            color: #333;
        }

        .post-page .post-meta {
            display: flex;
            gap: 1rem;
            align-items: center;
            margin-bottom: 2rem;
            padding-bottom: 1rem;
            border-bottom: 2px solid #f0f0f0;
        }

        .post-page .post-date {
            color: #09881c;
            font-weight: 600;
        }

        .post-page .post-content {
            font-size: 1.1rem;
            line-height: 1.8;
            color: #444;
        }

        .add-post-btn {
            position: fixed;
            bottom: 2rem;
            right: 2rem;
            background: linear-gradient(135deg, #076042, #082b37);
            color: white;
            border: none;
            border-radius: 50%;
            width: 60px;
            height: 60px;
            font-size: 1.5rem;
            cursor: pointer;
            box-shadow: 0 8px 32px rgba(102, 126, 234, 0.3);
            transition: all 0.3s ease;
            z-index: 50;
        }

        .add-post-btn:hover {
            transform: scale(1.1);
            box-shadow: 0 12px 40px rgba(102, 126, 234, 0.4);
        }

        .modal {
            display: none;
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0, 0, 0, 0.8);
            backdrop-filter: blur(5px);
            z-index: 1000;
            animation: fadeIn 0.3s ease;
        }

        .modal-content {
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            background: white;
            border-radius: 16px;
            padding: 2rem;
            width: 90%;
            max-width: 600px;
            max-height: 80vh;
            overflow-y: auto;
            animation: slideIn 0.3s ease;
        }

        .modal h2 {
            margin-bottom: 1.5rem;
            color: #333;
        }

        .form-group {
            margin-bottom: 1.5rem;
        }

        .form-group label {
            display: block;
            margin-bottom: 0.5rem;
            font-weight: 600;
            color: #555;
        }

        .form-group input,
        .form-group textarea {
            width: 100%;
            padding: 0.8rem;
            border: 2px solid #e1e5e9;
            border-radius: 8px;
            font-size: 1rem;
            transition: border-color 0.3s ease;
        }

        .form-group input:focus,
        .form-group textarea:focus {
            outline: none;
            border-color: #667eea;
        }

        .form-group textarea {
            resize: vertical;
            min-height: 120px;
        }

        .modal-buttons {
            display: flex;
            gap: 1rem;
            justify-content: flex-end;
        }

        .btn {
            padding: 0.8rem 1.5rem;
            border: none;
            border-radius: 8px;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.3s ease;
        }

        .btn-primary {
            background: linear-gradient(135deg, #076042, #082b37);
            color: white;
        }

        .btn-primary:hover {
            transform: translateY(-2px);
            box-shadow: 0 4px 20px rgba(102, 126, 234, 0.3);
        }

        .btn-secondary {
            background: #f8f9fa;
            color: #666;
            border: 1px solid #e1e5e9;
        }

        .btn-secondary:hover {
            background: #e9ecef;
        }

        .close-btn {
            position: absolute;
            top: 1rem;
            right: 1rem;
            background: none;
            border: none;
            font-size: 1.5rem;
            cursor: pointer;
            color: #999;
            transition: color 0.3s ease;
        }

        .close-btn:hover {
            color: #333;
        }

        @keyframes fadeInUp {
            from {
                opacity: 0;
                transform: translateY(30px);
            }
            to {
                opacity: 1;
                transform: translateY(0);
            }
        }

        @keyframes fadeIn {
            from { opacity: 0; }
            to { opacity: 1; }
        }

        @keyframes slideIn {
            from {
                opacity: 0;
                transform: translate(-50%, -60%);
            }
            to {
                opacity: 1;
                transform: translate(-50%, -50%);
            }
        }

        @media (max-width: 768px) {
            .hero h1 {
                font-size: 2.5rem;
            }

            .nav-links {
                gap: 1rem;
            }

            .blog-grid {
                grid-template-columns: 1fr;
            }

            .modal-content {
                width: 95%;
                padding: 1.5rem;
            }
        }
    </style>
</head>
<body>
    <header>
        <nav class="container">
            <div class="logo">Blog & Dev Diary</div>
            <ul class="nav-links">
                <li><a href="/">Home</a></li>
                <li><a href="#about">About</a></li>
                <li><a href="#resources">Resources</a></li>
            </ul>
        </nav>
    </header>

    <main class="container">
        <section class="hero">
            <h1>My Development Documentation</h1>
            <p>Documenting the development process of my final BlockchainAppDev project - from concept to deployment</p>
        </section>

        <section class="blog-grid" id="blog-posts">

            <!-- <article class="blog-post" data-post-id="2">
                <div class="post-date">June 18, 2025</div>
                <h2 class="post-title">Technology Stack Decision</h2>
                <div class="post-tags">
                    <span class="tag">Tech Stack</span>
                    <span class="tag">Tools</span>
                </div>
                <p class="post-excerpt">After researching various options, I've settled on using Solidity for smart contracts, React for the frontend, and Hardhat for development and testing. Also planning to deploy on a testnet first before considering mainnet deployment. The decision wasn't easy - I also considered using Truffle instead of Hardhat, but the community support and documentation for Hardhat seemed more comprehensive. For the frontend, I was torn between React and Vue.js, but React's ecosystem for blockchain development is more mature with libraries like Web3.js and Ethers.js having better React integration.</p>
                <span class="read-more" onclick="openPost(2)">Read more →</span>
            </article>

            <article class="blog-post" data-post-id="3">
                <div class="post-date">June 17, 2025</div>
                <h2 class="post-title">Setting Up Development Environment</h2>
                <div class="post-tags">
                    <span class="tag">Setup</span>
                    <span class="tag">Development</span>
                </div>
                <p class="post-excerpt">Spent the day configuring my development environment. Installed Node.js, set up Hardhat, configured MetaMask for testing, and created the basic project structure. Ready to start coding tomorrow! The setup process was more involved than I expected. I had to make sure all the versions were compatible, especially between Node.js and Hardhat. I also set up a local blockchain network using Hardhat's built-in network for testing. MetaMask configuration took some time as I had to add the local network and import test accounts. Created a clean folder structure separating contracts, scripts, tests, and frontend components.</p>
                <span class="read-more" onclick="openPost(3)">Read more →</span>
            </article>

            <article class="blog-post" data-post-id="1">
                <div class="post-date">May 20, 2025</div>
                <h2 class="post-title">Project Kickoff & Initial Planning</h2>
                <div class="post-tags">
                    <span class="tag">Planning</span>
                    <span class="tag">Research</span>
                </div>
                <p class="post-excerpt">Started my BlockchainAppDev final project today! After brainstorming various ideas, I've decided to build a decentralized task management system. The goal is to create something practical that demonstrates smart contract development, frontend integration, and proper blockchain architecture. I spent hours researching different project ideas and finally settled on something that would be both challenging and practical. The system will allow users to create, assign, and track tasks on the blockchain, with smart contracts handling the logic for task completion verification and reward distribution.</p>
                <span class="read-more" onclick="openPost(1)">Read more →</span>
            </article>

            <article class="blog-post" data-post-id="2">
                <div class="post-date">June 18, 2025</div>
                <h2 class="post-title">Technology Stack Decision</h2>
                <div class="post-tags">
                    <span class="tag">Tech Stack</span>
                    <span class="tag">Tools</span>
                </div>
                <p class="post-excerpt">After researching various options, I've settled on using Solidity for smart contracts, React for the frontend, and Hardhat for development and testing. Also planning to deploy on a testnet first before considering mainnet deployment. The decision wasn't easy - I also considered using Truffle instead of Hardhat, but the community support and documentation for Hardhat seemed more comprehensive. For the frontend, I was torn between React and Vue.js, but React's ecosystem for blockchain development is more mature with libraries like Web3.js and Ethers.js having better React integration.</p>
                <span class="read-more" onclick="openPost(2)">Read more →</span>
            </article>

            <article class="blog-post" data-post-id="3">
                <div class="post-date">June 17, 2025</div>
                <h2 class="post-title">Setting Up Development Environment</h2>
                <div class="post-tags">
                    <span class="tag">Setup</span>
                    <span class="tag">Development</span>
                </div>
                <p class="post-excerpt">Spent the day configuring my development environment. Installed Node.js, set up Hardhat, configured MetaMask for testing, and created the basic project structure. Ready to start coding tomorrow! The setup process was more involved than I expected. I had to make sure all the versions were compatible, especially between Node.js and Hardhat. I also set up a local blockchain network using Hardhat's built-in network for testing. MetaMask configuration took some time as I had to add the local network and import test accounts. Created a clean folder structure separating contracts, scripts, tests, and frontend components.</p>
                <span class="read-more" onclick="openPost(3)">Read more →</span>
            </article>

            <article class="blog-post" data-post-id="1">
                <div class="post-date">May 20, 2025</div>
                <h2 class="post-title">Project Kickoff & Initial Planning</h2>
                <div class="post-tags">
                    <span class="tag">Planning</span>
                    <span class="tag">Research</span>
                </div>
                <p class="post-excerpt">Started my BlockchainAppDev final project today! After brainstorming various ideas, I've decided to build a decentralized task management system. The goal is to create something practical that demonstrates smart contract development, frontend integration, and proper blockchain architecture. I spent hours researching different project ideas and finally settled on something that would be both challenging and practical. The system will allow users to create, assign, and track tasks on the blockchain, with smart contracts handling the logic for task completion verification and reward distribution.</p>
                <span class="read-more" onclick="openPost(1)">Read more →</span>
            </article> -->

            <article class="blog-post" data-post-id="1">
                <div class="post-date">May 19, 2025</div>
                <h2 class="post-title">First Entry!</h2>
                <div class="post-tags">
                    <span class="tag">Setup</span>
                    <span class="tag">Planning</span>
                    <span class="tag">Ideas</span>
                </div>
                <p class="post-excerpt">First entry! This is basically just to get the ball rolling with this project. I think the idea of documenting the whole process of development from start to finish for the Blockchain App Dev Project is really great. Not just for posterity but also to clear my thinking and understand what I am doing better. The goal with creating this blog is to log and upload entries at least once a week, but also when I encounter some issues that I am finding difficult to resolve. This is sort of like my ‘build in public’ for this project. The idea of course being that building things out in the open holds you accountable, in terms sticking to progress deadlines, and also in terms of procrastination or uncertainty. For me mapping out or writing out my thoughts is also an invaluable way to begin to organise my thoughts and think clearly. So anyway, all this to say that this is going to be my blog and diary for the duration of this final project. I will try to upload consistently to hold myself accountable, and I will also try to use this as a facility for thinking out loud when tackling the problems and hurdles of this project!
                    <br>All the best,
                    <br>- P
                </p>
                <span class="read-more" onclick="openPost(1)">Read more →</span>
            </article>


        </section>
    </main>

    <button class="add-post-btn" onclick="openModal()" title="Add new post">+</button>

    <div class="modal" id="postModal">
        <div class="modal-content">
            <button class="close-btn" onclick="closeModal()">&times;</button>
            <h2>Add New Blog Post</h2>
            <form id="postForm">
                <div class="form-group">
                    <label for="postTitle">Title</label>
                    <input type="text" id="postTitle" required>
                </div>
                <div class="form-group">
                    <label for="postTags">Tags (comma-separated)</label>
                    <input type="text" id="postTags" placeholder="e.g., Development, Testing, Bug Fix">
                </div>
                <div class="form-group">
                    <label for="postContent">Content</label>
                    <textarea id="postContent" required placeholder="Share your development progress, challenges, solutions, or insights..."></textarea>
                </div>
                <div class="modal-buttons">
                    <button type="button" class="btn btn-secondary" onclick="closeModal()">Cancel</button>
                    <button type="submit" class="btn btn-primary">Publish Post</button>
                </div>
            </form>
        </div>
    </div>

    <div class="post-page" id="postPage">
        <button class="back-btn" onclick="closePost()" title="Back to blog">←</button>
        <div class="post-page-content">
            <h1 id="postPageTitle"></h1>
            <div class="post-meta">
                <div class="post-date" id="postPageDate"></div>
                <div class="post-tags" id="postPageTags"></div>
            </div>
            <div class="post-content" id="postPageContent"></div>
        </div>
    </div>

    <script>
        // Firebase Configuration


        import { initializeApp } from "firebase/app";

        const firebaseConfig = {
            apiKey: "AIzaSyC_IrxVR0JGyNVnM2X5Alz8pq2NWskPs04",
            authDomain: "blockchainappdevblog.firebaseapp.com",
            projectId: "blockchainappdevblog",
            storageBucket: "blockchainappdevblog.firebasestorage.app",
            messagingSenderId: "1051903480215",
            appId: "1:1051903480215:web:2e7e63c6c185b7992074d2"
        };

        // Initialize Firebase
        firebase.initializeApp(firebaseConfig);
        const db = firebase.firestore();

        let posts = [];
        let predefinedPosts = [
            {
                id: 1,
                title: "Project Kickoff & Initial Planning",
                tags: ["Planning", "Research"],
                content: "Started my BlockchainAppDev final project today! After brainstorming various ideas, I've decided to build a decentralized task management system. The goal is to create something practical that demonstrates smart contract development, frontend integration, and proper blockchain architecture. I spent hours researching different project ideas and finally settled on something that would be both challenging and practical. The system will allow users to create, assign, and track tasks on the blockchain, with smart contracts handling the logic for task completion verification and reward distribution.",
                date: "June 19, 2025"
            },
            {
                id: 2,
                title: "Technology Stack Decision",
                tags: ["Tech Stack", "Tools"],
                content: "After researching various options, I've settled on using Solidity for smart contracts, React for the frontend, and Hardhat for development and testing. Also planning to deploy on a testnet first before considering mainnet deployment. The decision wasn't easy - I also considered using Truffle instead of Hardhat, but the community support and documentation for Hardhat seemed more comprehensive. For the frontend, I was torn between React and Vue.js, but React's ecosystem for blockchain development is more mature with libraries like Web3.js and Ethers.js having better React integration.",
                date: "June 18, 2025"
            },
            {
                id: 3,
                title: "Setting Up Development Environment",
                tags: ["Setup", "Development"],
                content: "Spent the day configuring my development environment. Installed Node.js, set up Hardhat, configured MetaMask for testing, and created the basic project structure. Ready to start coding tomorrow! The setup process was more involved than I expected. I had to make sure all the versions were compatible, especially between Node.js and Hardhat. I also set up a local blockchain network using Hardhat's built-in network for testing. MetaMask configuration took some time as I had to add the local network and import test accounts. Created a clean folder structure separating contracts, scripts, tests, and frontend components.",
                date: "June 17, 2025"
            }
        ];

        // Load posts from Firebase
        async function loadPosts() {
            try {
                const querySnapshot = await db.collection('posts').orderBy('timestamp', 'desc').get();
                const blogGrid = document.getElementById('blog-posts');

                querySnapshot.forEach((doc) => {
                    const post = { id: doc.id, ...doc.data() };
                    const postEl = createPostElement(post);
                    blogGrid.appendChild(postEl);
                });

                console.log('Posts loaded from Firebase');
            } catch (error) {
                console.error('Error loading posts:', error);
                // Fallback to predefined posts if Firebase fails
                loadPredefinedPosts();
            }
        }

        // Fallback function to load predefined posts
        function loadPredefinedPosts() {
            const blogGrid = document.getElementById('blog-posts');
            // Clear existing posts
            blogGrid.innerHTML = '';

            predefinedPosts.forEach(post => {
                const postEl = createPostElement(post);
                blogGrid.appendChild(postEl);
            });
        }

        // Save post to Firebase
        async function savePostToFirebase(title, tags, content) {
            try {
                const docRef = await db.collection('posts').add({
                    title: title,
                    tags: tags,
                    content: content,
                    date: formatDate(new Date()),
                    timestamp: firebase.firestore.FieldValue.serverTimestamp()
                });

                console.log('Post saved with ID:', docRef.id);
                return docRef.id;
            } catch (error) {
                console.error('Error saving post:', error);
                throw error;
            }
        }

        // Get post from Firebase or predefined posts
        async function getPost(postId) {
            // First check predefined posts
            const predefinedPost = predefinedPosts.find(p => p.id === postId);
            if (predefinedPost) return predefinedPost;

            // Then check Firebase
            try {
                const doc = await db.collection('posts').doc(postId).get();
                if (doc.exists) {
                    return { id: doc.id, ...doc.data() };
                }
            } catch (error) {
                console.error('Error getting post:', error);
            }

            return null;
        }

        function truncateText(text, wordLimit) {
            const words = text.split(' ');
            if (words.length <= wordLimit) return text;
            return words.slice(0, wordLimit).join(' ') + '...';
        }

        function openPost(postId) {
            getPost(postId).then(post => {
                if (!post) return;

                document.getElementById('postPageTitle').textContent = post.title;
                document.getElementById('postPageDate').textContent = post.date;
                document.getElementById('postPageContent').textContent = post.content;

                const tagsHtml = post.tags.map(tag => `<span class="tag">${tag}</span>`).join('');
                document.getElementById('postPageTags').innerHTML = tagsHtml;

                document.getElementById('postPage').style.display = 'block';
                document.body.style.overflow = 'hidden';
            });
        }

        function closePost() {
            document.getElementById('postPage').style.display = 'none';
            document.body.style.overflow = 'auto';
        }

        function openModal() {
            document.getElementById('postModal').style.display = 'block';
            document.body.style.overflow = 'hidden';
        }

        function closeModal() {
            document.getElementById('postModal').style.display = 'none';
            document.body.style.overflow = 'auto';
            document.getElementById('postForm').reset();
        }

        function formatDate(date) {
            return date.toLocaleDateString('en-US', {
                year: 'numeric',
                month: 'long',
                day: 'numeric'
            });
        }

        function createPostElement(post) {
            const postEl = document.createElement('article');
            postEl.className = 'blog-post';
            postEl.style.animationDelay = '0.1s';
            postEl.setAttribute('data-post-id', post.id);

            const tagsHtml = post.tags.map(tag => `<span class="tag">${tag}</span>`).join('');
            const truncatedContent = truncateText(post.content, 50);

            postEl.innerHTML = `
                <div class="post-date">${post.date}</div>
                <h2 class="post-title">${post.title}</h2>
                <div class="post-tags">${tagsHtml}</div>
                <p class="post-excerpt">${truncatedContent}</p>
                <span class="read-more" onclick="openPost(${post.id})">Read more →</span>
            `;

            return postEl;
        }

        function addPost(title, tags, content) {
            const post = {
                id: Date.now(),
                title: title,
                tags: tags,
                content: content,
                date: formatDate(new Date())
            };

            posts.unshift(post);

            const blogGrid = document.getElementById('blog-posts');
            const newPostEl = createPostElement(post);
            blogGrid.insertBefore(newPostEl, blogGrid.firstChild);

            // Add entrance animation
            newPostEl.style.opacity = '0';
            newPostEl.style.transform = 'translateY(30px)';

            setTimeout(() => {
                newPostEl.style.transition = 'all 0.5s ease';
                newPostEl.style.opacity = '1';
                newPostEl.style.transform = 'translateY(0)';
            }, 100);
        }

        // Enhanced addPost function with Firebase integration
        async function addPostWithFirebase(title, tags, content) {
            try {
                // Show loading state
                const btn = document.querySelector('.add-post-btn');
                btn.innerHTML = '⏳';
                btn.disabled = true;

                // Save to Firebase
                const postId = await savePostToFirebase(title, tags, content);

                // Create post object with Firebase ID
                const post = {
                    id: postId,
                    title: title,
                    tags: tags,
                    content: content,
                    date: formatDate(new Date())
                };

                // Add to UI
                const blogGrid = document.getElementById('blog-posts');
                const newPostEl = createPostElement(post);
                blogGrid.insertBefore(newPostEl, blogGrid.firstChild);

                // Add entrance animation
                newPostEl.style.opacity = '0';
                newPostEl.style.transform = 'translateY(30px)';

                setTimeout(() => {
                    newPostEl.style.transition = 'all 0.5s ease';
                    newPostEl.style.opacity = '1';
                    newPostEl.style.transform = 'translateY(0)';
                }, 100);

                // Show success state
                btn.innerHTML = '✓';
                btn.style.background = '#28a745';

                setTimeout(() => {
                    btn.innerHTML = '+';
                    btn.style.background = 'linear-gradient(135deg, #667eea, #764ba2)';
                    btn.disabled = false;
                }, 2000);

            } catch (error) {
                console.error('Error adding post:', error);

                // Show error state
                const btn = document.querySelector('.add-post-btn');
                btn.innerHTML = '❌';
                btn.style.background = '#dc3545';

                setTimeout(() => {
                    btn.innerHTML = '+';
                    btn.style.background = 'linear-gradient(135deg, #667eea, #764ba2)';
                    btn.disabled = false;
                }, 2000);

                alert('Error saving post. Please try again.');
            }
        }

        document.getElementById('postForm').addEventListener('submit', function(e) {
            e.preventDefault();

            const title = document.getElementById('postTitle').value;
            const tagsInput = document.getElementById('postTags').value;
            const content = document.getElementById('postContent').value;

            const tags = tagsInput.split(',').map(tag => tag.trim()).filter(tag => tag);

            // Use Firebase-enabled function
            addPostWithFirebase(title, tags, content);
            closeModal();
        });

        // Close modal when clicking outside
        document.getElementById('postModal').addEventListener('click', function(e) {
            if (e.target === this) {
                closeModal();
            }
        });

        // Close post page when clicking outside content
        document.getElementById('postPage').addEventListener('click', function(e) {
            if (e.target === this) {
                closePost();
            }
        });

        // Update existing post excerpts to show only first 50 words
        document.addEventListener('DOMContentLoaded', function() {
            // Load posts from Firebase when page loads
            loadPosts();

            const postExcerpts = document.querySelectorAll('.post-excerpt');
            postExcerpts.forEach(excerpt => {
                const fullText = excerpt.textContent;
                const truncatedText = truncateText(fullText, 50);
                excerpt.textContent = truncatedText;
            });
        });

        // Smooth scrolling for navigation
        document.querySelectorAll('.nav-links a').forEach(link => {
            link.addEventListener('click', function(e) {
                e.preventDefault();
                const targetId = this.getAttribute('href').substring(1);
                const targetElement = document.getElementById(targetId);
                if (targetElement) {
                    targetElement.scrollIntoView({ behavior: 'smooth' });
                }
            });
        });

        // Add keyboard shortcut for new post (Ctrl/Cmd + N)
        document.addEventListener('keydown', function(e) {
            if ((e.ctrlKey || e.metaKey) && e.key === 'n') {
                e.preventDefault();
                openModal();
            }
        });
    </script>
</body>
</html>